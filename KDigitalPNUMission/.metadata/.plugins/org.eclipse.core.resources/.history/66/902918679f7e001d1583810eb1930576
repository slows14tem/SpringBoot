1. Mission4에서 어노테이션(IoC 컨테이너)을 이용한 DI 방식으로 변경한 버전

스프링 IoC 컨테이너
	스프링에서 Bean 객체를 생성하여 담아 놓는 그릇(Bean 객체만 @AutoWired를 통한 의존성 주입
	가능)
	컨테이너에 Bean객체를 등록하는 방법
	1. @Component 방식
		Bean 객체로 등록하고 싶은 클래스에 @Component 붙여주면 @ComponentScan이 
		@Component가 붙은 클래스를 찾아서 컨테이너에 Bean 객체로 등록한다. 
		@Service, @Controller, @Repository, @Configuration
	2. @Bean 방식
		@Configuration이 붙어있는 클래스에서 @Bean이 붙은 메서드를 찾아 컨테이너에 Bean으로
		등록
	
	https://cbw1030.tistory.com/320

DI(Dependency Injection)의존성 주입
	DI란 외부에서 두 객체 간의 관계를 결정해주는 디자인 패턴으로, 인터페이스를 사이에 둬서 
	클래스 레벨에서는 의존관계가 고정되지 않도록 하고 런타임 시에 관계를 동적으로 주입하여
	유연성을 확보하고 결합도를 낮출 수 있게 해준다. (객체간의 결합력이 강하기 때문에 객체를
	바꿔 끼우는 과정에서 많은 수정이 필요하기 때문)
	스프링 IoC컨테이너에 들어있는 Bean객체만 의존성 주입이 가능
	
	@Autowired란, 스프링 DI(Dependency Injection)에 사용되는 어노테이션 
		1. 생성자에 붙이기(Constructor Injection)
			스프링 레퍼런스에서 권장
			생성자 주입을 사용해야 하는 이유
				1. 객체의 불변성 확보
				2. 테스트 코드의 작성
				3. final 키워드 작성 및 Lombok과의 결합
				4. 스프링에 비침투적인 코드 작성
				5. 순환 참조 에러 방지
				https://mangkyu.tistory.com/125
				
		2. Setter에 붙이기(Setter Injection)
		3. 필드에 붙이기(Field Injection)
	
	https://cbw1030.tistory.com/309


애플리케이션 컨텍스트(Application Context)란?
	Spring에서는 빈의 생성과 관계설정 같은 제어를 담당하는 IoC(Inversion of Control) 
	컨테이너인 빈 팩토리(Bean Factory)가 존재한다. 하지만 실제로는 빈의 생성과 관계설정 외에 
	추가적인 기능이 필요한데, 이러한 이유로 Spring에서는 빈 팩토리를 상속받아 확장한 
	애플리케이션 컨텍스트(Application Context)를 주로 사용한다.
	애플리케이션 컨텍스트는 별도의 설정 정보를 참고하고 IoC를 적용하여 빈의 생성, 
	관계설정 등의 제어 작업을 총괄한다. 애플리케이션 컨텍스트에는 직접 오브젝트를 생성하고 
	관계를 맺어주는 코드가 없고, 그런 생성 정보와 연관관계 정보에 대한 설정을 읽어 처리한다. 
	
	애플리케이션 컨텍스트 장점
		1. 클라이언트는 @Configuration이 붙은 구체적인 팩토리 클래스를 알 필요가 없다.
		2. 애플리케이션 컨텍스트는 종합 IoC 서비스를 제공해준다.
		3. 애플리케이션 컨텍스트를 통해 다양한 빈 검색 방법을 제공할 수 있다.
		
Spring에서 싱글톤을 사용하는 이유
	애플리케이션 컨텍스트에 의해 등록된 빈은 기본적으로 싱글톤으로 관리된다. 
	즉, 스프링에 여러 번 빈을 요청하더라도 매번 동일한 객체를 돌려준다는 것이다. 
	애플리케이션 컨텍스트가 싱글톤으로 빈을 관리하는 이유는 대규모 트래픽을 처리할 수 있도록 하기 
	위함이다. (빈을 싱글톤 스코프로 관리하여 1개의 요청이 왔을 때 여러 쓰레드가 빈을 공유해 처리)
	자바로 싱글톤 패턴을 구현하면 발생하는 단점을 해결하기 위해 스프링은 직접 싱글톤 형태의 오브젝트를 
	만들고 관리하는 기능을 제공하는데, 그것이 바로 싱글톤 레지스트리(Singleton Registry) 이다. 
	스프링 컨테이너는 싱글톤을 생성하고, 관리하고, 공급하는 컨테이너이기도 하다.
	
	기본적으로 싱글톤이 멀티쓰레드 환경에서 서비스 형태의 객체로 사용되기 위해서는 내부에 상태정보를 
	갖지 않는 무상태(Stateless) 방식으로 만들어져야 한다. 만약 여러 쓰레드들이 동시에 상태를 
	접근하여 수정한다면 상당히 위험하기 때문이다.
	
https://mangkyu.tistory.com/151
 