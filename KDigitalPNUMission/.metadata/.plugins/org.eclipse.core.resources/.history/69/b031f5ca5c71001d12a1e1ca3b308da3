#############################################################################################
## DataSource Setting
#
# MySQL인 경우
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/dbname?serverTimezone=Asia/Seoul
#spring.datasource.username=user
#spring.datasource.password=pwd
# H2인 경우
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:tcp://localhost/~/springboot
spring.datasource.username=sa
spring.datasource.password=
# Oracle인 경우
#spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
#spring.datasource.url=jdbc:oracle:thin:@localhost:1521/dbname
#spring.datasource.username=user
#spring.datasource.password=pwd

#############################################################################################
## JPA Setting
#
# 테이블 옵션
#  update : 기존의 스키마를 유지하며 JPA에 의해 변경된 부분만 추가한다.
#  validate : 엔티티와 테이블이 정상적으로 매핑되어있는지만 검증한다. ==> 운영 서버에서 사용
#  create : 기존에 존재하는 스키마를 삭제하고 새로 생성한다.
#  create-drop : 스키마를 생성하고 애플리케이션이 종료될 때 삭제한다.
#  none : 초기화 동작을 하지 않는다.
spring.jpa.hibernate.ddl-auto=create
# DDL 생성 시 데이터베이스의 고유 기능을 사용할지
spring.jpa.generate-ddl=false
# JPA가 생성한 Query를 보여준다.
spring.jpa.show-sql=true
# JPA가 생성한 Query를 보기 좋게 보여준다.
spring.jpa.properties.hibernate.format_sql=true
# JPA가 사용할 dialect 설정
#spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect
