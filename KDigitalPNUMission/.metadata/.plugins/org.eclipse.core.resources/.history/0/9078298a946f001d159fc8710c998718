package com.pnu.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.pnu.domain.BoardVO;

@Repository
public class BoardDAOH2 implements BoardDAO {
	//잘못 입력해서 데이터가 없는 예외의 경우 처리할 방법 생각
	
	private Connection con = null;
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	public BoardDAOH2() {
		try {
			Class.forName("org.h2.Driver");
			con = DriverManager.getConnection("jdbc:h2:tcp://localhost/~/mvcboard", "sa", "");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	public Map<String, Object> getBoards() {
		String sql = "select * from board";
		Map<String, Object> map = new HashMap<>();
		map.put("sql", sql);
		try {
			List<BoardVO> list = jdbcTemplate.query(sql, new BeanPropertyRowMapper<BoardVO>(BoardVO.class));
			map.put("data", list);
		} catch (Exception e) {
			map.put("data", null);
		}
		return map;
	}
	
	public Map<String, Object> getBoard(int seq) {
		Statement st = null;
		ResultSet rs = null;
		String sql = String.format("select * from board where seq = %d", seq);
		Map<String, Object> map = new HashMap<>();
		map.put("sql", sql);
		try {
			BoardVO bv = jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper<BoardVO>(BoardVO.class));
			map.put("data", bv);
		} catch (Exception e) {
			map.put("data", null);
		}
		return map;
	}
	
	public int getNextseq() {
		Statement st = null;
		ResultSet rs = null;
		String sql = "select max(seq) from board";
		try {
			st = con.createStatement();
			rs = st.executeQuery(sql);
			rs.next();
			int nextSeq = rs.getInt(1)+1;
			return nextSeq;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) rs.close();
				if (st != null) st.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return 1;
	}
	
	public Map<String, Object> addBoard(BoardVO boardVO) {
		String sql = "insert into board(seq, title, writer, content, cnt) values(?,?,?,?,?)";
		Map<String, Object> map = new HashMap<>();
		int nextSeq;
		try {
			nextSeq = jdbcTemplate.queryForObject("select max(seq) from board", Integer.class);
		} catch (Exception e) {
			map.put("data", null);
			map.put("sql", sql);
			return map;
		}
		
		sql = String.format("insert into board(seq, title, writer, content, cnt) values(%d,'%s','%s','%s',%d)",
				nextSeq, boardVO.getTitle(), boardVO.getWriter(), boardVO.getContent(), 0);
		map.put("sql", sql);
		try {
			BoardVO bv = jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper<BoardVO>(BoardVO.class));
			map.put("data", bv);
			//postman 쿼리스트링에 seq를 주지 않아도 알아서 nextSeq값을 입력해줌
		} catch (Exception e) {
			map.put("data", null);
		}
		return map;
		
	}
	
	public Map<String, Object> updateBoard(BoardVO boardVO) {
		Map<String, Object> map = new HashMap<>();
		String sql = String.format("update board set title = '%s', writer = '%s', content = '%s' where seq = %d", 
				boardVO.getTitle(), boardVO.getWriter(), boardVO.getContent(), boardVO.getSeq());
		map.put("sql", sql);
		try {
			if(jdbcTemplate.update(sql) != 0) {
				Map<String, Object> Gmap = getBoard(boardVO.getSeq());
				map.put("data", Gmap.get("data"));
			}
			
		} catch (Exception e) {
			map.put("data", null);
		} 
		return map;
	}
	
	public Map<String, Object> deleteBoard(int seq) {
		Statement st = null;
		String sql = String.format("delete from board where seq = %d",
				seq);
		try {
			st = con.createStatement();
			Map<String, Object> map = new HashMap<>();
			Map<String, Object> gmap = getBoard(seq);
			map.put("data", gmap.get("data"));
			map.put("sql", sql);
			st.executeUpdate(sql);
			return map;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (st != null) st.close();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return null;
	}
}
